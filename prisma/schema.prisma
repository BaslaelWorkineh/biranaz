// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}




model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  //non-auth relations
  diagrams Diagram[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//non-auth.js schema starts from here



model Diagram{
  id String @id @default(uuid())
  title String
  description String
  type DiagramType
  metadata Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relations
  creatorId String
  creator User @relation(fields: [creatorId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  Nodes Node[]
  Edges Edge[]

  //references
}


model Node {
  id String @id
  type NodeType
  properties Json

  //references 
  diagramId String
  diagram Diagram @relation(fields: [diagramId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  //temporal informations
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Edge {
  id String @id
  type EdgeType
  properties Json

  //references 
  diagramId String
  diagram Diagram @relation(fields: [diagramId],references: [id],onDelete: Cascade,onUpdate: Cascade)
}


//enums
enum DiagramType {
  FLOW_DIAGRAM
  KNOWLEDGE_DIAGRAM
  MIND_MAP_DIAGRAM
  PRIORITY_DIAGRAM
}

enum NodeType {
  DOCUMENT
  SCHEDULE
  REMINDER
  KNOWLEDGE
  CONDITION
  SIDE_EFFECT
}

enum EdgeType {
  BUTTON_EDGE
  BI_DIRECTIONAL
}